[1mdiff --git a/docker-compose.yml b/docker-compose.yml[m
[1mindex 9b05d02..bed0e7c 100644[m
[1m--- a/docker-compose.yml[m
[1m+++ b/docker-compose.yml[m
[36m@@ -5,6 +5,7 @@[m [mservices:[m
     build: [m
       context: .[m
       dockerfile: gateway/Dockerfile[m
[32m+[m[32m    container_name: omg-roma-gateway[m
     ports:[m
       - "3100:3100"[m
     environment:[m
[36m@@ -15,7 +16,8 @@[m [mservices:[m
       - omg_roma_config:/app/config[m
       - omg_roma_plugins:/app/plugins[m
     depends_on:[m
[31m-      - youtube-plugin[m
[32m+[m[32m      youtube-plugin:[m
[32m+[m[32m        condition: service_healthy[m
     networks:[m
       - omg-roma-network[m
     restart: unless-stopped[m
[36m@@ -26,6 +28,9 @@[m [mservices:[m
     build: [m
       context: .[m
       dockerfile: plugins/youtube/Dockerfile[m
[32m+[m[32m    container_name: omg-youtube-plugin[m
[32m+[m[32m    ports:[m
[32m+[m[32m      - "3001:3001"[m
     environment:[m
       - PORT=3001[m
       - CONFIG_FILE=/app/config.json[m
[36m@@ -33,6 +38,12 @@[m [mservices:[m
     networks:[m
       - omg-roma-network[m
     restart: unless-stopped[m
[32m+[m[32m    healthcheck:[m
[32m+[m[32m      test: ["CMD", "curl", "-f", "http://localhost:3001/ready"][m
[32m+[m[32m      interval: 30s[m
[32m+[m[32m      timeout: 10s[m
[32m+[m[32m      retries: 3[m
[32m+[m[32m      start_period: 40s[m
 [m
 networks:[m
   omg-roma-network:[m
[1mdiff --git a/gateway/src/plugin-manager.js b/gateway/src/plugin-manager.js[m
[1mindex ca32c4c..2c82253 100644[m
[1m--- a/gateway/src/plugin-manager.js[m
[1m+++ b/gateway/src/plugin-manager.js[m
[36m@@ -169,39 +169,53 @@[m [mclass PluginManager {[m
       console.log(`üîó Plugin info:`, pluginInfo);[m
       [m
       // Get plugin config from the plugin container directly[m
[31m-      const baseUrl = `http://${pluginId}-plugin:${pluginInfo.port}`;[m
[32m+[m[32m      const baseUrl = `http://omg-${pluginId}-plugin:${pluginInfo.port}`;[m
       console.log(`üåê Trying to connect to: ${baseUrl}`);[m
       [m
[31m-      // Try to get plugin.json from the container via HTTP[m
[32m+[m[32m      // Try to get plugin.json from the container via HTTP with retry[m
       let pluginConfig;[m
[31m-      try {[m
[31m-        console.log(`üìÑ Fetching plugin config from ${baseUrl}/plugin.json`);[m
[31m-        const response = await axios.get(`${baseUrl}/plugin.json`, { timeout: 5000 });[m
[31m-        pluginConfig = response.data;[m
[31m-        console.log(`‚úÖ Retrieved plugin config for ${pluginId} via HTTP`);[m
[31m-      } catch (httpError) {[m
[31m-        console.error(`‚ùå HTTP error for ${pluginId}:`, httpError.message);[m
[31m-        [m
[31m-        // Fallback: create basic config from registry info[m
[31m-        console.log(`‚ö†Ô∏è  Could not fetch plugin.json via HTTP, using registry info`);[m
[31m-        pluginConfig = {[m
[31m-          id: pluginId,[m
[31m-          name: pluginId.charAt(0).toUpperCase() + pluginId.slice(1),[m
[31m-          version: "1.0.0",[m
[31m-          port: pluginInfo.port,[m
[31m-          endpoints: {[m
[31m-            search: "/search",[m
[31m-            discover: "/discover", [m
[31m-            meta: "/meta",[m
[31m-            stream: "/stream"[m
[31m-          },[m
[31m-          stremio: {[m
[31m-            search_catalog_name: `Ricerca ${pluginId.charAt(0).toUpperCase() + pluginId.slice(1)}`,[m
[31m-            search_catalog_id: `${pluginId}_search`,[m
[31m-            discover_catalog_name: `${pluginId.charAt(0).toUpperCase() + pluginId.slice(1)} Discover`,[m
[31m-            discover_catalog_id: `${pluginId}_discover`[m
[32m+[m[32m      let retryCount = 0;[m
[32m+[m[32m      const maxRetries = 3;[m
[32m+[m[41m      [m
[32m+[m[32m      while (retryCount < maxRetries) {[m
[32m+[m[32m        try {[m
[32m+[m[32m          console.log(`üìÑ Fetching plugin config from ${baseUrl}/plugin.json (attempt ${retryCount + 1}/${maxRetries})`);[m
[32m+[m[32m          const response = await axios.get(`${baseUrl}/plugin.json`, { timeout: 10000 });[m
[32m+[m[32m          pluginConfig = response.data;[m
[32m+[m[32m          console.log(`‚úÖ Retrieved plugin config for ${pluginId} via HTTP`);[m
[32m+[m[32m          break;[m
[32m+[m[32m        } catch (httpError) {[m
[32m+[m[32m          retryCount++;[m
[32m+[m[32m          console.error(`‚ùå HTTP error for ${pluginId} (attempt ${retryCount}/${maxRetries}):`, httpError.message);[m
[32m+[m[41m          [m
[32m+[m[32m          if (retryCount >= maxRetries) {[m
[32m+[m[32m            // Fallback: create basic config from registry info[m
[32m+[m[32m            console.log(`‚ö†Ô∏è  Could not fetch plugin.json via HTTP after ${maxRetries} attempts, using registry info`);[m
[32m+[m[32m            pluginConfig = {[m
[32m+[m[32m              id: pluginId,[m
[32m+[m[32m              name: pluginId.charAt(0).toUpperCase() + pluginId.slice(1),[m
[32m+[m[32m              version: "1.0.0",[m
[32m+[m[32m              port: pluginInfo.port,[m
[32m+[m[32m              endpoints: {[m
[32m+[m[32m                search: "/search",[m
[32m+[m[32m                discover: "/discover",[m[41m [m
[32m+[m[32m                meta: "/meta",[m
[32m+[m[32m                stream: "/stream"[m
[32m+[m[32m              },[m
[32m+[m[32m              stremio: {[m
[32m+[m[32m                search_catalog_name: `Ricerca ${pluginId.charAt(0).toUpperCase() + pluginId.slice(1)}`,[m
[32m+[m[32m                search_catalog_id: `${pluginId}_search`,[m
[32m+[m[32m                discover_catalog_name: `${pluginId.charAt(0).toUpperCase() + pluginId.slice(1)} Discover`,[m
[32m+[m[32m                discover_catalog_id: `${pluginId}_discover`[m
[32m+[m[32m              }[m
[32m+[m[32m            };[m
[32m+[m[32m          } else {[m
[32m+[m[32m            // Wait before retry[m
[32m+[m[32m            const waitTime = retryCount * 2000; // 2s, 4s, 6s[m
[32m+[m[32m            console.log(`‚è≥ Waiting ${waitTime/1000}s before retry...`);[m
[32m+[m[32m            await new Promise(resolve => setTimeout(resolve, waitTime));[m
           }[m
[31m-        };[m
[32m+[m[32m        }[m
       }[m
       [m
       console.log(`üîß Plugin config for ${pluginId}:`, JSON.stringify(pluginConfig, null, 2));[m
[36m@@ -246,7 +260,7 @@[m [mclass PluginManager {[m
       const plugin = {[m
         id: pluginId,[m
         config: pluginConfig,[m
[31m-        baseUrl: `http://${pluginId}-plugin:${pluginConfig.port}`,[m
[32m+[m[32m        baseUrl: `http://omg-${pluginId}-plugin:${pluginConfig.port}`,[m
         status: 'discovered',[m
         lastHealthCheck: null[m
       };[m
[36m@@ -275,25 +289,28 @@[m [mclass PluginManager {[m
     return true;[m
   }[m
 [m
[31m-  async waitForPluginsReady(timeout = 30000) {[m
[32m+[m[32m  async waitForPluginsReady(timeout = 60000) {[m
     console.log('‚è≥ Waiting for plugins to be ready...');[m
     [m
     const startTime = Date.now();[m
[31m-    const checkInterval = 2000;[m
[32m+[m[32m    const checkInterval = 3000;[m
     [m
     while (Date.now() - startTime < timeout) {[m
       let allReady = true;[m
       [m
       for (const [pluginId, plugin] of this.plugins) {[m
         try {[m
[32m+[m[32m          console.log(`üîç Checking health of plugin: ${pluginId}`);[m
           const healthCheck = await this.checkPluginHealth(pluginId);[m
           if (!healthCheck.healthy) {[m
[32m+[m[32m            console.log(`‚ö†Ô∏è  Plugin ${pluginId} not ready yet:`, healthCheck.error || 'Health check failed');[m
             allReady = false;[m
[31m-            break;[m
[32m+[m[32m          } else {[m
[32m+[m[32m            console.log(`‚úÖ Plugin ${pluginId} is healthy`);[m
           }[m
         } catch (error) {[m
[32m+[m[32m          console.log(`‚ùå Plugin ${pluginId} health check error:`, error.message);[m
           allReady = false;[m
[31m-          break;[m
         }[m
       }[m
       [m
[36m@@ -302,6 +319,7 @@[m [mclass PluginManager {[m
         return true;[m
       }[m
       [m
[32m+[m[32m      console.log(`‚è≥ Waiting ${checkInterval/1000}s before next health check...`);[m
       await new Promise(resolve => setTimeout(resolve, checkInterval));[m
     }[m
     [m
[36m@@ -316,8 +334,9 @@[m [mclass PluginManager {[m
     }[m
     [m
     try {[m
[32m+[m[32m      console.log(`üîç Health check for ${pluginId} at ${plugin.baseUrl}/health`);[m
       const response = await axios.get(`${plugin.baseUrl}/health`, {[m
[31m-        timeout: 5000[m
[32m+[m[32m        timeout: 10000[m
       });[m
       [m
       const healthy = response.status === 200 && response.data.status === 'healthy';[m
[36m@@ -335,6 +354,8 @@[m [mclass PluginManager {[m
       plugin.status = 'unhealthy';[m
       plugin.lastHealthCheck = new Date().toISOString();[m
       [m
[32m+[m[32m      console.log(`‚ùå Health check failed for ${pluginId}:`, error.message);[m
[32m+[m[41m      [m
       return {[m
         healthy: false,[m
         error: error.message[m
[1mdiff --git a/plugins/youtube/src/index.js b/plugins/youtube/src/index.js[m
[1mindex 8e05dde..7788ff8 100644[m
[1m--- a/plugins/youtube/src/index.js[m
[1m+++ b/plugins/youtube/src/index.js[m
[36m@@ -75,6 +75,41 @@[m [mapp.get('/health', (req, res) => {[m
   });[m
 });[m
 [m
[32m+[m[32m// Readiness check endpoint (more comprehensive than health)[m
[32m+[m[32mapp.get('/ready', (req, res) => {[m
[32m+[m[32m  try {[m
[32m+[m[32m    // Check if all services are properly initialized[m
[32m+[m[32m    const isReady = youtubeAPI && ytdlpService && ytdlpService.isAvailable();[m
[32m+[m[41m    [m
[32m+[m[32m    if (isReady) {[m
[32m+[m[32m      res.json({[m
[32m+[m[32m        status: 'ready',[m
[32m+[m[32m        timestamp: new Date().toISOString(),[m
[32m+[m[32m        plugin: 'youtube',[m
[32m+[m[32m        version: '1.0.0',[m
[32m+[m[32m        services: {[m
[32m+[m[32m          youtube_api: youtubeAPI.isConfigured(),[m
[32m+[m[32m          ytdlp: ytdlpService.isAvailable()[m
[32m+[m[32m        }[m
[32m+[m[32m      });[m
[32m+[m[32m    } else {[m
[32m+[m[32m      res.status(503).json({[m
[32m+[m[32m        status: 'not_ready',[m
[32m+[m[32m        timestamp: new Date().toISOString(),[m
[32m+[m[32m        plugin: 'youtube',[m
[32m+[m[32m        reason: 'Services not fully initialized'[m
[32m+[m[32m      });[m
[32m+[m[32m    }[m
[32m+[m[32m  } catch (error) {[m
[32m+[m[32m    res.status(503).json({[m
[32m+[m[32m      status: 'error',[m
[32m+[m[32m      timestamp: new Date().toISOString(),[m
[32m+[m[32m      plugin: 'youtube',[m
[32m+[m[32m      error: error.message[m
[32m+[m[32m    });[m
[32m+[m[32m  }[m
[32m+[m[32m});[m
[32m+[m
 // Search endpoint[m
 app.post('/search', async (req, res) => {[m
   try {[m
[36m@@ -286,6 +321,7 @@[m [masync function startServer() {[m
       console.log(`üåê OMG-Roma YouTube Plugin listening on: http://0.0.0.0:${PORT}`);[m
       console.log(`üîß Configuration: ${config.get('search_mode')} mode`);[m
       console.log(`üì∫ Following ${config.get('followed_channels', []).length} channels`);[m
[32m+[m[32m      console.log(`‚úÖ Plugin is ready to accept requests`);[m
     });[m
     [m
   } catch (error) {[m
